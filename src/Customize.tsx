import { h, Component } from 'preact';
import logoUrl from './images/logo.svg';
import downloadUrl from './images/download.svg';
import externalLinkUrl from './images/external-link.svg';
import bind from 'bind-decorator';
import { HighLight } from 'preact-highlight';
import { createBundleCode, createHTMLCode, HTMLResult } from './CodeUtils';
import { packagesData, packagesMap, defaultPackages, Package, PackageGroup } from './PackagesData';

interface State {
    packages:string[];
    useYarn:boolean;
    useBundler:boolean;
    bundleCode?:string;
    htmlResult?:HTMLResult;
    unminified:boolean;
    version:string;
    size:number;
    totalSize:number;
}

const PACKAGES = 'selectedPackages';
const BUNDLER = 'useBundler';
const YARN = 'useYarn';
const UNMINIFIED = 'unminified';
const VERSION = 'version';

const TITLE = 'PixiJS Customize';
const DESCRIPTION = 'Auto-generated by https://pixijs.io/customize';

/**
 * Main application
 */
export class Customize extends Component<any, State> {
    constructor() {
        super();

        const state:State = {
            packages: defaultPackages,
            size: 0,
            totalSize: 0,
            useYarn: !!localStorage.getItem(YARN),
            useBundler: !!localStorage.getItem(BUNDLER),
            unminified: !!localStorage.getItem(UNMINIFIED),
            version: localStorage.getItem(VERSION) || 'release',
        };

        // Check for saved packages
        const savedPackages = localStorage.getItem(PACKAGES);
        if (savedPackages) {
            state.packages = JSON.parse(savedPackages);
        }
        for (const name in packagesMap) {
            state.totalSize += packagesMap[name].size;
        }
        state.size = this.getSize(state.packages);
        state.bundleCode = createBundleCode(state.packages);
        state.htmlResult = createHTMLCode(state.packages, state.unminified, state.version);
        this.state = state;
    }

    /**
     * Toggle package selection
     */
    @bind
    private onTogglePackage(event:Event) {
        const {packages} = this.state;
        const {checked, dataset: {name}} = event.currentTarget as HTMLInputElement;
        if (checked) {
            packages.push(name);
        }
        else {
            packages.splice(packages.indexOf(name), 1);
        }
        this.refreshPackages(packages);
    }

    /**
     * Toggling ununminified checkbox
     */
    @bind
    private onMinified(event:Event) {
        const {checked} = event.currentTarget as HTMLInputElement;
        if (checked) {
            localStorage.setItem(UNMINIFIED, '1');
        }
        else {
            localStorage.removeItem(UNMINIFIED);
        }
        const { version, packages } = this.state;
        this.setState({
            unminified: checked,
            htmlResult: createHTMLCode(packages, checked, version)
        });
    }

    /**
     * Toggling ununminified checkbox
     */
    @bind
    private onRelease(event:Event) {
        const {value} = event.currentTarget as HTMLInputElement;
        const version = value;
        localStorage.setItem(VERSION, version);
        const { packages, unminified } = this.state;
        this.setState({
            version,
            htmlResult: createHTMLCode(packages, unminified, version)
        });
    }

    private onToggleGroup(group:PackageGroup, event:Event) {
        const {checked} = event.currentTarget as HTMLInputElement;
        const {packages} = this.state;
        if (checked) {
            group.packages
                .filter(name => !packagesMap[name].required)
                .filter(name => !packages.includes(name))
                .forEach(name => packages.push(name));
        }
        else {
            group.packages
                .filter(name => !packagesMap[name].required)
                .filter(name => packages.includes(name))
                .forEach(name => packages.splice(packages.indexOf(name), 1));
        }
        this.refreshPackages(packages);
    }

    /**
     * Regenerate the bundle source code
     */
    private refreshPackages(packages:string[]) {
        localStorage.setItem(PACKAGES, JSON.stringify(packages));
        this.setState({
            packages,
            size: this.getSize(packages),
            bundleCode: createBundleCode(packages),
            htmlResult: createHTMLCode(packages, this.state.unminified, this.state.version)
        });
    }

    /**
     * Get the totally file size used
     */
    private getSize(packages:string[]): number {
        return packages.map(name => packagesMap[name].size).reduce((prev, curr) => prev + curr);
    }

    /**
     * Handle the use of yarn
     */
    private onYarn(useYarn:boolean) {
        if (useYarn) {
            localStorage.setItem(YARN, '1');
        }
        else {
            localStorage.removeItem(YARN);
        }
        this.setState({ useYarn });
    }

    /**
     * Handle browser type
     */
    private onBundler(useBundler:boolean) {
        if (useBundler) {
            localStorage.setItem(BUNDLER, '1');
        }
        else {
            localStorage.removeItem(BUNDLER);
        }
        this.setState({ useBundler });
    }

    private groupSelected(group:PackageGroup): boolean {
        for (const name of group.packages) {
            if (!this.state.packages.includes(name)) {
                return false;
            }
        }
        return true;
    }

    /**
     * Reset to the default packages
     */
    @bind
    private onReset() {
        const {packages} = this.state;
        packages.length = 0;
        for (const name of defaultPackages) {
            packages.push(name);
        }
        this.refreshPackages(packages);
    }

    render(props:any, { packages, useYarn, useBundler, bundleCode, htmlResult, version, unminified, size, totalSize }:State) {
        const percent = (size/totalSize*100);
        return (<div class="app-container">
            <div class="app-header">
                <header class="col">
                    <h1><img src={logoUrl} class="logo" alt="PixiJS" /> Customize</h1>
                    <div class="app-tabs">
                        <button class={`btn btn-sm px-3 btn-${!useBundler ? 'primary' : 'outline-secondary'}`}
                            onClick={this.onBundler.bind(this, false)}>Browser</button>
                        <button class={`btn btn-sm px-3 btn-${useBundler ? 'primary' : 'outline-secondary'}`}
                            onClick={this.onBundler.bind(this, true)}>Bundler</button>
                    </div>
                </header>
            </div>
            <div class="app-main">
                <div class="app-col app-col-list">
                    <div class="app-size">
                        Estimated Filesize:
                        <span class="text-white float-right">{Math.round(size / 1024)} KB</span>
                        <div class="progress">
                            <div class="progress-bar" style={{width: percent+'%'}}>
                                {Math.round(percent)}%
                            </div>
                        </div>
                    </div>
                    { packagesData.groups.map((group, i) => {
                        return <div class="customize-group">
                            <h2><div class="custom-control custom-checkbox">
                                <input type="checkbox"
                                    class="custom-control-input"
                                    id={`package_group${i}`}
                                    checked={this.groupSelected(group)}
                                    onChange={this.onToggleGroup.bind(this, group)} />
                                <label class="custom-control-label" for={`package_group${i}`}>{group.title}</label>
                            </div></h2>
                            <ul class="customize-list-group">
                                { group.packages.map(name => packagesMap[name]).map(pkg => {
                                    return <li class={`customize-list-group-item ${pkg.required ? 'disabled' : ''}`}>
                                        <div class="custom-control custom-checkbox">
                                            <input type="checkbox"
                                            class="custom-control-input"
                                            id={pkg.name}
                                            data-name={pkg.name}
                                            onChange={this.onTogglePackage}
                                            checked={packages.includes(pkg.name)} />
                                            <label class="custom-control-label" for={pkg.name}>{pkg.name}</label>
                                        </div>
                                    </li>;
                                })}
                            </ul>
                        </div>;
                    }) }
                    <button onClick={this.onReset} class="mt-4 btn btn-primary btn-block">Reset</button>
                </div>
                { useBundler && <div class="app-col app-col-bundler">
                    <h2>Bundle Code</h2>
                    <p>When using <a href="https://webpack.js.org/">Webpack</a>,
                    <a href="https://rollupjs.org"> Rollup</a> or
                    <a href="https://parceljs.org/"> Parcel</a> you can embed
                    the follow code in your project and then
                    simply <code>import * as PIXI from './pixi.js'</code>.</p>
                    <p className="note">Since unused Renderer, Application and Loader plugins prevent
                    proper tree-shaking using bundlers, it can be useful to bundle
                    your own version of PixiJS with only the parts your project needs
                    producing the smallest possible filesize.</p>
                    <HighLight className="customize-code mb-2" code={bundleCode} language="javascript" />
                    <a download="pixi.js" href={`data:text/plain,${bundleCode}`}>
                        <button class="btn btn-primary btn-block float-right">
                            <img src={downloadUrl} class="mr-2" width="20" height="20" />
                            Download
                        </button>
                    </a>
                </div> }
                { useBundler && <div class="app-col app-col-aside">
                    <h2>Install</h2>
                    <div class="btn-group w-100 mb-2">
                        <button class={`btn btn-sm btn-${!useYarn ? 'primary' : 'outline-secondary'}`} onClick={this.onYarn.bind(this, false)}>npm</button>
                        <button class={`btn btn-sm btn-${useYarn ? 'primary' : 'outline-secondary'}`} onClick={this.onYarn.bind(this, true)}>yarn</button>
                    </div>
                    <code class="customize-code small">
                        { useYarn ? 'yarn add' : 'npm install'} { packages.join(' ') }
                    </code>
                </div> }
                { !useBundler && <div class="app-col app-col-browser">
                    <h2>
                        <div class="float-sm-right d-sm-flex align-items-center">
                            <div class="custom-control custom-checkbox d-sm-inline mr-0 mb-3 mb-sm-0 mr-sm-3">
                                <input type="checkbox"
                                class="custom-control-input"
                                id="unminified"
                                onChange={this.onMinified}
                                checked={unminified} />
                                <label class="custom-control-label small text-muted" for="unminified"><small>Debug</small></label>
                            </div>
                            <select class="form-control form-control-sm mb-3 mb-sm-0" onChange={this.onRelease}>
                                <option value="release" selected={version === 'release'}>Latest Release</option>
                                <option value="dev" selected={version === 'dev'}>Current Development</option>
                            </select>
                        </div>
                        Browser Code
                    </h2>
                    <HighLight className="customize-code mb-2" code={htmlResult.code} language="html" />
                    <div class="d-flex flex-shrink-0">
                        <a class="w-100" download="pixi.html" href={`data:text/plain,${htmlResult.code}`}>
                            <button class="btn btn-primary btn-block float-right">
                                <img src={downloadUrl} class="icon" width="20" height="20" />
                                Download
                            </button>
                        </a>
                        {/*https://docs.jsfiddle.net/api/display-a-fiddle-from-post*/}
                        <form class="w-100" method="post" action="https://jsfiddle.net/api/post/library/pure/" target="_blank">
                            <input type="hidden" name="wrap" value="b" />
                            <input type="hidden" name="html" value={htmlResult.pluginsHtml} />
                            <input type="hidden" name="js" value={htmlResult.initCode} />
                            <input type="hidden" name="resources" value={htmlResult.resources.join(',')} />
                            <input type="hidden" name="title" value={TITLE} />
                            <input type="hidden" name="description" value={DESCRIPTION} />
                            <button class="btn btn-primary btn-block float-right">
                                <img src={externalLinkUrl} class="icon" />
                                JSFiddle
                            </button>
                        </form>
                        {/*https://blog.codepen.io/documentation/api/prefill/*/}
                        <form class="w-100" method="post" action="https://codepen.io/pen/define" target="_blank">
                            <input type="hidden" name="data" value={JSON.stringify({
                                title: TITLE,
                                description: DESCRIPTION,
                                html: htmlResult.pluginsHtml,
                                js: htmlResult.initCode,
                                js_external: htmlResult.resources.join(';'),
                            })} />
                            <button class="btn btn-primary btn-block float-right">
                                <img src={externalLinkUrl} class="icon" />
                                CodePen
                            </button>
                        </form>
                    </div>
                </div> }
            </div>
        </div>);
    }
}

class Code extends Component<any, any> {
    render(props:any) {
        return <span class="exports">{props.children}</span>;
    }
}
